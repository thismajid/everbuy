// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  firstName   String?
  lastName    String?
  email       String?
  mobile      String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Order       Order[]
  Transaction Transaction[]
}

model Category {
  id        Int                 @id @default(autoincrement())
  parentId  Int?
  title     String
  slug      String
  content   String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  products  ProductCategories[]
}

model Product {
  id          Int                 @id @default(autoincrement())
  title       String
  description String?
  slug        String
  price       Float
  discount    Float
  quantity    Int
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  deletedAt   DateTime?
  categories  ProductCategories[]
  ProductTags ProductTags[]
  Comment     Comment[]
}

model ProductCategories {
  id         Int       @id @default(autoincrement())
  product    Product   @relation(fields: [productId], references: [id])
  productId  Int
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model Tag {
  id          Int           @id @default(autoincrement())
  title       String
  slug        String
  content     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  ProductTags ProductTags[]
}

model ProductTags {
  id        Int       @id @default(autoincrement())
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  tag       Tag       @relation(fields: [tagId], references: [id])
  tagId     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum CommentStatus {
  PENDING
  ACCEPT
  DECLINE
}

model Comment {
  id        Int           @id @default(autoincrement())
  title     String
  content   String?
  rating    Int
  status    CommentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
  product   Product       @relation(fields: [productId], references: [id])
  productId Int
  parentId  Int?
  parent    Comment?      @relation("ChildComments", fields: [parentId], references: [id])
  children  Comment[]     @relation("ChildComments")
}

enum OrderStatus {
  PENDING
  COMPLETE
}

model Order {
  id        Int         @id @default(autoincrement())
  total     Float
  discount  Float
  content   String?
  status    OrderStatus
  firstName String
  lastName  String
  mobile    String
  email     String
  line1     String
  line2     String
  city      String
  province  String
  country   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
}

enum TransactionStatus {
  PENDING
  PAID
  FAIELD
}

model Transaction {
  id         Int               @id @default(autoincrement())
  content    String?
  amount     Float
  gateway    String
  authority  String
  cardNumber String
  status     TransactionStatus
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  deletedAt  DateTime
  user       User              @relation(fields: [userId], references: [id])
  userId     Int
}
